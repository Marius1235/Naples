{"ast":null,"code":"var _jsxFileName = \"/Users/carldring/Desktop/Munchificator/munch-app/Naples/src/contexts/CapturedImageContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport BackgroundRemoverService from \"../services/BackgroundRemoverSerive\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CapturedImageContext = /*#__PURE__*/createContext(null);\n// Context makes it easier to share data between pages. Without context you cant render things on another page without refreshing.\n\nconst CapturedImageProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [capturedImage, setCapturedImage] = useState(null);\n  const handleRemoveBackground = async () => {\n    if (capturedImage) {\n      try {\n        const newImage = await BackgroundRemoverService.removeBackground(capturedImage);\n        setCapturedImage(newImage);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CapturedImageContext.Provider, {\n    value: {\n      capturedImage,\n      setCapturedImage,\n      removeBackground: handleRemoveBackground\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(CapturedImageProvider, \"y6AGsMsTPvf2L7RoLFrtKdDPRio=\");\n_c = CapturedImageProvider;\nexport default CapturedImageProvider;\nvar _c;\n$RefreshReg$(_c, \"CapturedImageProvider\");","map":{"version":3,"names":["React","createContext","useState","BackgroundRemoverService","jsxDEV","_jsxDEV","CapturedImageContext","CapturedImageProvider","_ref","_s","children","capturedImage","setCapturedImage","handleRemoveBackground","newImage","removeBackground","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/carldring/Desktop/Munchificator/munch-app/Naples/src/contexts/CapturedImageContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  ReactNode,\n  FC,\n} from \"react\";\nimport ICapturedImage from \"../interfaces/ICapturedImage\";\nimport BackgroundRemoverService from \"../services/BackgroundRemoverSerive\";\n\nexport const CapturedImageContext = createContext<ICapturedImage | null>(null);\n\ntype Props = {\n  children: ReactNode;\n};\n\n// Context makes it easier to share data between pages. Without context you cant render things on another page without refreshing.\n\nconst CapturedImageProvider: FC<Props> = ({ children }) => {\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n\n  const handleRemoveBackground = async () => {\n    if (capturedImage) {\n      try {\n        const newImage = await BackgroundRemoverService.removeBackground(capturedImage);\n        setCapturedImage(newImage);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <CapturedImageContext.Provider\n      value={{\n        capturedImage,\n        setCapturedImage,\n        removeBackground: handleRemoveBackground,\n      }}\n    >\n      {children}\n    </CapturedImageContext.Provider>\n  );\n};\n\nexport default CapturedImageProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IACVC,aAAa,EAEbC,QAAQ,QAGH,OAAO;AAEd,OAAOC,wBAAwB,MAAM,qCAAqC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,OAAO,MAAMC,oBAAoB,gBAAGL,aAAa,CAAwB,IAAI,CAAC;AAM9E;;AAEA,MAAMM,qBAAgC,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACpD,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EAEvE,MAAMW,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAIF,aAAa,EAAE;MACjB,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMX,wBAAwB,CAACY,gBAAgB,CAACJ,aAAa,CAAC;QAC/EC,gBAAgB,CAACE,QAAQ,CAAC;MAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,oBAAoB,CAACY,QAAQ;IAC5BC,KAAK,EAAE;MACLR,aAAa;MACbC,gBAAgB;MAChBG,gBAAgB,EAAEF;IACpB,CAAE;IAAAH,QAAA,EAEDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACoB,CAAC;AAEpC,CAAC;AAACd,EAAA,CAzBIF,qBAAgC;AAAAiB,EAAA,GAAhCjB,qBAAgC;AA2BtC,eAAeA,qBAAqB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}