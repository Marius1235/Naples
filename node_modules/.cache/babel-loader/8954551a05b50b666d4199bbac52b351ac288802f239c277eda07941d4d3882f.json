{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trond\\\\Documents\\\\Unity\\\\Naples\\\\src\\\\components\\\\MergeTestComponent.tsx\",\n  _s2 = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState, useEffect, useContext } from 'react';\nimport ImageScrollerComponent from './ImageScrollerComponent';\nimport BackgroundImageModule from \"../modules/BackgroundImageModule\";\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\nimport mergeImages from 'merge-images';\n\n/*use state initierer et tomt array av typen IBackgroundImage\r\nsetBackgroundImages og backgroundImages er koblet sammen, slik at når setBackgroundImages blir kjørt\r\nså oppdateres verdiene i backgroundImages*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MergeTestComponents = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [backgroundImages, setBackgroundImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const capturedImage = useContext(CapturedImageContext);\n  const [overlayImage, setOverlayImage] = useState(null);\n\n  // Useffect kjører setBackgroundImagesFromModule når endringer gjøres i bakgrunnen\n  useEffect(() => {\n    setBackgroundImagesFromModule();\n  }, []);\n\n  /*Henter backgroundimages fra modul og legger de i images, setBackgroundImages settes til images\r\n  setSelectedImage settes til images med index 2*/\n  const setBackgroundImagesFromModule = () => {\n    const images = BackgroundImageModule.getAll();\n    setBackgroundImages(images);\n    setSelectedImage(images[2]);\n  };\n  const MergeImages = (backgroundImage, capturedImage) => {\n    _s();\n    const [mergedImage, setMergedImage] = useState(\"\");\n    useEffect(() => {\n      // Assuming you have some images stored in your public folder\n      mergeImages([backgroundImage, capturedImage]).then(b64 => setMergedImage(b64)).catch(error => console.error(error));\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: mergedImage,\n      alt: \"Merged images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  };\n  _s(MergeImages, \"YtkSzQhmpqjNvIAsGcGOjtw3XRk=\");\n  let mergedImage = MergeImages(selectedImage, selectedImage);\n  const handleImageClick = image => {\n    setSelectedImage(image);\n    mergedImage = MergeImages(selectedImage, selectedImage);\n  };\n  return;\n  /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ImageScrollerComponent, {\n      images: backgroundImages,\n      selectedImage: selectedImage,\n      onImageClick: handleImageClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Captured Image \", capturedImage === null || capturedImage === void 0 ? void 0 : capturedImage.capturedImage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), mergedImage, /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s2(MergeTestComponents, \"1MXfPHMwPGmSdWCYfR1B4vLoe70=\");\n_c = MergeTestComponents;\nexport default MergeTestComponents;\nvar _c;\n$RefreshReg$(_c, \"MergeTestComponents\");","map":{"version":3,"names":["useState","useEffect","useContext","ImageScrollerComponent","BackgroundImageModule","CapturedImageContext","mergeImages","jsxDEV","_jsxDEV","MergeTestComponents","_s2","_s","$RefreshSig$","backgroundImages","setBackgroundImages","selectedImage","setSelectedImage","capturedImage","overlayImage","setOverlayImage","setBackgroundImagesFromModule","images","getAll","MergeImages","backgroundImage","mergedImage","setMergedImage","then","b64","catch","error","console","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","handleImageClick","image","children","onImageClick","_c","$RefreshReg$"],"sources":["C:/Users/trond/Documents/Unity/Naples/src/components/MergeTestComponent.tsx"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useState, useEffect, useContext, useRef } from 'react';\r\nimport IBackgroundImage from \"../interfaces/IBackgroundImage\";\r\nimport BackgroundImageItem from \"./BackgroundImageItem\";\r\nimport ImageScrollerComponent from './ImageScrollerComponent';\r\nimport BackgroundImageModule from \"../modules/BackgroundImageModule\";\r\nimport ICapturedImage from '../interfaces/ICapturedImage';\r\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\r\nimport mergeImages from 'merge-images';  \r\n\r\n/*use state initierer et tomt array av typen IBackgroundImage\r\nsetBackgroundImages og backgroundImages er koblet sammen, slik at når setBackgroundImages blir kjørt\r\nså oppdateres verdiene i backgroundImages*/\r\nconst MergeTestComponents = () => {\r\n  const [backgroundImages, setBackgroundImages] = useState<IBackgroundImage[]>([]);\r\n  const [selectedImage, setSelectedImage] = useState<IBackgroundImage | null>(null);\r\n  const capturedImage = useContext(CapturedImageContext);\r\n  const [overlayImage, setOverlayImage] = useState<IBackgroundImage | null> (null);\r\n\r\n  // Useffect kjører setBackgroundImagesFromModule når endringer gjøres i bakgrunnen\r\n  useEffect(() => {\r\n    setBackgroundImagesFromModule();\r\n  }, []);\r\n \r\n  /*Henter backgroundimages fra modul og legger de i images, setBackgroundImages settes til images\r\n  setSelectedImage settes til images med index 2*/\r\n  const setBackgroundImagesFromModule = () => {\r\n    const images = BackgroundImageModule.getAll();\r\n    setBackgroundImages(images);\r\n    setSelectedImage(images[2]);\r\n  };\r\n\r\n  const MergeImages = (backgroundImage : any, capturedImage : any) => {\r\n    const [mergedImage, setMergedImage] = useState(\"\");\r\n  \r\n    useEffect(() => {\r\n      // Assuming you have some images stored in your public folder\r\n      mergeImages([backgroundImage, capturedImage])\r\n        .then((b64) => setMergedImage(b64))\r\n        .catch((error) => console.error(error));\r\n    }, []);\r\n  \r\n    return <img src={mergedImage} alt=\"Merged images\" />;\r\n  }\r\n\r\n  let mergedImage = MergeImages(selectedImage,selectedImage);\r\n  \r\n  const handleImageClick = (image: IBackgroundImage) => {\r\n    setSelectedImage(image);\r\n    mergedImage = MergeImages(selectedImage,selectedImage);\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n\r\n  return \r\n    <div>\r\n              <ImageScrollerComponent\r\n              images={backgroundImages}\r\n              selectedImage={selectedImage}\r\n              onImageClick={handleImageClick}\r\n            />\r\n            <h1>Captured Image {capturedImage?.capturedImage}</h1>            \r\n            {mergedImage}\r\n            <img src={selectedImage}/>      \r\n    </div>\r\n  ;\r\n};\r\n\r\nexport default MergeTestComponents;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}