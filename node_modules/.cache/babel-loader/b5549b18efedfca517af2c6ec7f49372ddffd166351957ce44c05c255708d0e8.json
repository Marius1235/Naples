{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trond\\\\Documents\\\\Unity\\\\Naples\\\\src\\\\components\\\\MergeTestComponent.tsx\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState, useEffect, useContext } from 'react';\nimport ImageScrollerComponent from './ImageScrollerComponent';\nimport BackgroundImageModule from \"../modules/BackgroundImageModule\";\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\n//import mergeImages from 'merge-images';  \n\n/*use state initierer et tomt array av typen IBackgroundImage\r\nsetBackgroundImages og backgroundImages er koblet sammen, slik at når setBackgroundImages blir kjørt\r\nså oppdateres verdiene i backgroundImages*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MergeTestComponents = () => {\n  _s();\n  const [backgroundImages, setBackgroundImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const capturedImage = useContext(CapturedImageContext);\n  const [overlayImage, setOverlayImage] = useState(null);\n\n  // Useffect kjører setBackgroundImagesFromModule når endringer gjøres i bakgrunnen\n  useEffect(() => {\n    setBackgroundImagesFromModule();\n  }, []);\n\n  /*Henter backgroundimages fra modul og legger de i images, setBackgroundImages settes til images\r\n  setSelectedImage settes til images med index 2*/\n  const setBackgroundImagesFromModule = () => {\n    const images = BackgroundImageModule.getAll();\n    setBackgroundImages(images);\n    setSelectedImage(images[2]);\n  };\n  const handleImageClick = image => {\n    setSelectedImage(image);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ImageScrollerComponent, {\n      images: backgroundImages,\n      selectedImage: selectedImage,\n      onImageClick: handleImageClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Captured Image \", capturedImage === null || capturedImage === void 0 ? void 0 : capturedImage.capturedImage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Generate picture \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: require(`../assets/images/${selectedImage}`),\n        alt: \"skdjfklj\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MergeTestComponents, \"1MXfPHMwPGmSdWCYfR1B4vLoe70=\");\n_c = MergeTestComponents;\nexport default MergeTestComponents;\nvar _c;\n$RefreshReg$(_c, \"MergeTestComponents\");","map":{"version":3,"names":["useState","useEffect","useContext","ImageScrollerComponent","BackgroundImageModule","CapturedImageContext","jsxDEV","_jsxDEV","MergeTestComponents","_s","backgroundImages","setBackgroundImages","selectedImage","setSelectedImage","capturedImage","overlayImage","setOverlayImage","setBackgroundImagesFromModule","images","getAll","handleImageClick","image","children","onImageClick","fileName","_jsxFileName","lineNumber","columnNumber","src","require","alt","_c","$RefreshReg$"],"sources":["C:/Users/trond/Documents/Unity/Naples/src/components/MergeTestComponent.tsx"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useState, useEffect, useContext, useRef } from 'react';\r\nimport IBackgroundImage from \"../interfaces/IBackgroundImage\";\r\nimport BackgroundImageItem from \"./BackgroundImageItem\";\r\nimport ImageScrollerComponent from './ImageScrollerComponent';\r\nimport BackgroundImageModule from \"../modules/BackgroundImageModule\";\r\nimport ICapturedImage from '../interfaces/ICapturedImage';\r\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\r\n//import mergeImages from 'merge-images';  \r\n\r\n/*use state initierer et tomt array av typen IBackgroundImage\r\nsetBackgroundImages og backgroundImages er koblet sammen, slik at når setBackgroundImages blir kjørt\r\nså oppdateres verdiene i backgroundImages*/\r\nconst MergeTestComponents = () => {\r\n  const [backgroundImages, setBackgroundImages] = useState<IBackgroundImage[]>([]);\r\n  const [selectedImage, setSelectedImage] = useState<IBackgroundImage | null>(null);\r\n  const capturedImage = useContext(CapturedImageContext);\r\n  const [overlayImage, setOverlayImage] = useState<IBackgroundImage | null> (null);\r\n\r\n  // Useffect kjører setBackgroundImagesFromModule når endringer gjøres i bakgrunnen\r\n  useEffect(() => {\r\n    setBackgroundImagesFromModule();\r\n  }, []);\r\n \r\n  /*Henter backgroundimages fra modul og legger de i images, setBackgroundImages settes til images\r\n  setSelectedImage settes til images med index 2*/\r\n  const setBackgroundImagesFromModule = () => {\r\n    const images = BackgroundImageModule.getAll();\r\n    setBackgroundImages(images);\r\n    setSelectedImage(images[2]);\r\n  };\r\n  \r\n  const handleImageClick = (image: IBackgroundImage) => {\r\n    setSelectedImage(image);\r\n  };\r\n  \r\n   \r\n\r\n  return (\r\n    <div>\r\n              <ImageScrollerComponent\r\n              images={backgroundImages}\r\n              selectedImage={selectedImage}\r\n              onImageClick={handleImageClick}\r\n            />\r\n            <h1>Captured Image {capturedImage?.capturedImage}</h1>            \r\n            <p>Generate picture <img src={require(`../assets/images/${selectedImage}`)} alt={\"skdjfklj\"}/></p>        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MergeTestComponents;"],"mappings":";;AAAA,OAAO,sCAAsC;AAC7C,SAASA,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAgB,OAAO;AAG/D,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,qBAAqB,MAAM,kCAAkC;AAEpE,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE;;AAEA;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAqB,EAAE,CAAC;EAChF,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAA0B,IAAI,CAAC;EACjF,MAAMc,aAAa,GAAGZ,UAAU,CAACG,oBAAoB,CAAC;EACtD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAA2B,IAAI,CAAC;;EAEhF;EACAC,SAAS,CAAC,MAAM;IACdgB,6BAA6B,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;EACE,MAAMA,6BAA6B,GAAGA,CAAA,KAAM;IAC1C,MAAMC,MAAM,GAAGd,qBAAqB,CAACe,MAAM,CAAC,CAAC;IAC7CR,mBAAmB,CAACO,MAAM,CAAC;IAC3BL,gBAAgB,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,MAAME,gBAAgB,GAAIC,KAAuB,IAAK;IACpDR,gBAAgB,CAACQ,KAAK,CAAC;EACzB,CAAC;EAID,oBACEd,OAAA;IAAAe,QAAA,gBACUf,OAAA,CAACJ,sBAAsB;MACvBe,MAAM,EAAER,gBAAiB;MACzBE,aAAa,EAAEA,aAAc;MAC7BW,YAAY,EAAEH;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFpB,OAAA;MAAAe,QAAA,GAAI,iBAAe,EAACR,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEA,aAAa;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtDpB,OAAA;MAAAe,QAAA,GAAG,mBAAiB,eAAAf,OAAA;QAAKqB,GAAG,EAAEC,OAAO,CAAE,oBAAmBjB,aAAc,EAAC,CAAE;QAACkB,GAAG,EAAE;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrG,CAAC;AAEV,CAAC;AAAClB,EAAA,CApCID,mBAAmB;AAAAuB,EAAA,GAAnBvB,mBAAmB;AAsCzB,eAAeA,mBAAmB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}