[{"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\index.tsx":"1","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\reportWebVitals.ts":"2","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\App.tsx":"3","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\contexts\\CapturedImageContext.tsx":"4","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\services\\BackgroundRemoverSerive.ts":"5","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\index.ts":"6","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\ChooseBackgroundPage.tsx":"7","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\TakePicturePage.tsx":"8","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\PictureChoicePage.tsx":"9","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\BackgroundImageList.tsx":"10","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\ImageChoiceComponent.tsx":"11","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\CameraComponent.tsx":"12","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\ImageScrollerComponent.tsx":"13","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\modules\\BackgroundImageModule.ts":"14","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\MergeTestComponent.tsx":"15","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\TestPictureMerge.tsx":"16"},{"size":704,"mtime":1685692005011,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1685692005015,"results":"19","hashOfConfig":"18"},{"size":659,"mtime":1685694815884,"results":"20","hashOfConfig":"18"},{"size":1249,"mtime":1685692005011,"results":"21","hashOfConfig":"18"},{"size":1363,"mtime":1685692005015,"results":"22","hashOfConfig":"18"},{"size":303,"mtime":1685694758672,"results":"23","hashOfConfig":"18"},{"size":329,"mtime":1685620508749,"results":"24","hashOfConfig":"18"},{"size":744,"mtime":1685692005013,"results":"25","hashOfConfig":"18"},{"size":714,"mtime":1685692005013,"results":"26","hashOfConfig":"18"},{"size":2013,"mtime":1685682710748,"results":"27","hashOfConfig":"18"},{"size":962,"mtime":1685692005010,"results":"28","hashOfConfig":"18"},{"size":4167,"mtime":1685692005009,"results":"29","hashOfConfig":"18"},{"size":873,"mtime":1685693256251,"results":"30","hashOfConfig":"18"},{"size":926,"mtime":1685653018181,"results":"31","hashOfConfig":"18"},{"size":2377,"mtime":1685705945663,"results":"32","hashOfConfig":"18"},{"size":282,"mtime":1685694645662,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"ollvwm",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"37"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"37"},"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\index.tsx",[],[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\reportWebVitals.ts",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\App.tsx",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\contexts\\CapturedImageContext.tsx",["90"],[],"import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  ReactNode,\r\n  FC,\r\n} from \"react\";\r\nimport ICapturedImage from \"../interfaces/ICapturedImage\";\r\nimport BackgroundRemoverService from \"../services/BackgroundRemoverSerive\";\r\n\r\nexport const CapturedImageContext = createContext<ICapturedImage | null>(null);\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\n// Context makes it easier to share data between pages. Without context you cant render things on another page without refreshing.\r\n\r\nconst CapturedImageProvider: FC<Props> = ({ children }) => {\r\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\r\n\r\n  const handleRemoveBackground = async () => {\r\n    if (capturedImage) {\r\n      try {\r\n        const newImage = await BackgroundRemoverService.removeBackground(\r\n          capturedImage\r\n        );\r\n        setCapturedImage(newImage);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CapturedImageContext.Provider\r\n      value={{\r\n        capturedImage,\r\n        setCapturedImage,\r\n        removeBackground: handleRemoveBackground,\r\n      }}\r\n    >\r\n      {children}\r\n    </CapturedImageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CapturedImageProvider;\r\n","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\services\\BackgroundRemoverSerive.ts",["91","92","93","94","95"],[],"import React, { useContext, useEffect } from 'react';\r\nimport { ResponseType } from 'axios';\r\nimport { CapturedImageContext } from '../contexts/CapturedImageContext';\r\n\r\nconst BackgroundRemoverService = (\r\n    () => {\r\n        const removeBackground = async (image: string): Promise<string> => {\r\n            const base64Image = btoa(image);\r\n\r\n            try {\r\n                const response = await fetch('https://api.remove.bg/v1.0/removebg', {\r\n                  method: 'POST',\r\n                  headers: {\r\n                    'X-Api-Key': '<YOUR-API-KEY>',\r\n                    'Content-Type': 'application/json',\r\n                  },\r\n                  body: JSON.stringify({\r\n                    image_file_b64: base64Image,\r\n                    size: 'auto',\r\n                  }),\r\n                });\r\n            \r\n                if (!response.ok) {\r\n                  throw new Error('Remove bg API call failed');\r\n                }\r\n            \r\n                const data = await response.json();\r\n            \r\n                // return the image data\r\n                return data.result;\r\n              } catch (error) {\r\n                console.error(error);\r\n                throw error;\r\n              }\r\n        };\r\n\r\n        return{\r\n            removeBackground\r\n        }\r\n    }    \r\n)();\r\n\r\nexport default BackgroundRemoverService;","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\index.ts",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\ChooseBackgroundPage.tsx",["96"],[],"import ChooseBackgroundComponent from \"../components/ChooseBackgroundComponent\"\r\nimport BackgroundImageList from \"../components/BackgroundImageList\"\r\n\r\nconst ChooseBackgroundPage = () => {\r\n    return(\r\n        <div>            \r\n            <BackgroundImageList/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChooseBackgroundPage","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\TakePicturePage.tsx",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\PictureChoicePage.tsx",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\BackgroundImageList.tsx",["97","98","99","100"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useState, useEffect, useContext, useRef } from 'react';\r\nimport IBackgroundImage from \"../interfaces/IBackgroundImage\";\r\nimport BackgroundImageItem from \"./BackgroundImageItem\";\r\nimport ImageScrollerComponent from './ImageScrollerComponent';\r\nimport BackgroundImageModule from \"../modules/BackgroundImageModule\";\r\nimport ICapturedImage from '../interfaces/ICapturedImage';\r\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";  \r\n\r\n/*use state initierer et tomt array av typen IBackgroundImage\r\nsetBackgroundImages og backgroundImages er koblet sammen, slik at når setBackgroundImages blir kjørt\r\nså oppdateres verdiene i backgroundImages*/\r\nconst BackgroundImageList = () => {\r\n  const [backgroundImages, setBackgroundImages] = useState<IBackgroundImage[]>([]);\r\n  const [selectedImage, setSelectedImage] = useState<IBackgroundImage | null>(null);\r\n  const capturedImage = useContext(CapturedImageContext);\r\n  const [overlayImage, setOverlayImage] = useState<ICapturedImage | null> (null);\r\n\r\n  // Useffect kjører setBackgroundImagesFromModule når endringer gjøres i bakgrunnen\r\n  useEffect(() => {\r\n    setBackgroundImagesFromModule();\r\n  }, []);\r\n \r\n  /*Henter backgroundimages fra modul og legger de i images, setBackgroundImages settes til images\r\n  setSelectedImage settes til images med index 2*/\r\n  const setBackgroundImagesFromModule = () => {\r\n    const images = BackgroundImageModule.getAll();\r\n    setBackgroundImages(images);\r\n    setSelectedImage(images[1]);\r\n  };\r\n  \r\n  const handleImageClick = (image: IBackgroundImage) => {\r\n    setSelectedImage(image);\r\n  };  \r\n\r\n  return (\r\n    <div>\r\n              <ImageScrollerComponent\r\n              images={backgroundImages}\r\n              selectedImage={selectedImage}\r\n              onImageClick={handleImageClick}\r\n            />\r\n            <h1>Captured Image: {capturedImage?.capturedImage}</h1>        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackgroundImageList;","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\ImageChoiceComponent.tsx",["101","102","103"],[],"// Imports of necessary libraries and files \r\nimport { useRef, useEffect, useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\r\nimport BackgroundRemoverService from \"../services/BackgroundRemoverSerive\";\r\n\r\n// Fetches the image in the useState and displays it in a canvasRef.\r\nconst ImageChoiceComponent: React.FC = () => {\r\n  const capturedImageContext = useContext(CapturedImageContext);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // Html elements with img output and Link(button) to the previous page\r\n  return (\r\n    <div>\r\n      {capturedImageContext?.capturedImage && (\r\n        <img src={capturedImageContext.capturedImage} alt=\"Captured\" />\r\n      )}\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />  \r\n      <Link to=\"/\">Retake</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export for use in pages\r\nexport default ImageChoiceComponent;","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\CameraComponent.tsx",["104"],[],"// Imports of necessary libraries and files\r\nimport { useRef, useEffect, useState, useContext } from \"react\";\r\nimport { CapturedImageContext } from \"../contexts/CapturedImageContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Camera component for video streaming, picture taking and countdown.\r\nconst CameraComponent: React.FC = () => {\r\n  const videoRef = useRef<HTMLVideoElement>(null); // useRef can be used to store a mutable value that does not cause a re-render when updated.\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const capturedImageContext = useContext(CapturedImageContext);\r\n  const [countdown, setCountdown] = useState(5);\r\n  const [isCounting, setIsCounting] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  // Starts a timer that counts down from 5 to 0.\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout;\r\n\r\n    if (isCounting) {\r\n      timer = setInterval(() => {\r\n        setCountdown((prevCountdown) => prevCountdown - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(timer);\r\n  }, [isCounting]);\r\n\r\n  // When the countdown reaches 0, the takePicture function is called and the image is stored in a useState.\r\n  useEffect(() => {\r\n    if (countdown === 0 && isCounting) {\r\n      takePicture();\r\n      setTimeout(() => {\r\n        navigate(\"pictureChoice\");\r\n      }, 50);\r\n    }\r\n  }, [countdown, isCounting, capturedImageContext]);\r\n\r\n  // Runs when the button is clicked. Starts the timer which then initilizes the takePhoto function.\r\n  // After the takePhoto function is called, you then get redirected to the next page.\r\n  const startCountdown = () => {\r\n    setCountdown(5);\r\n    setIsCounting(true);\r\n  };\r\n\r\n  // Function that runs in the background on startup. Finds the selected external device on the computer.\r\n  useEffect(() => {\r\n    const findCamera = async (): Promise<MediaDeviceInfo | null> => {\r\n      try {\r\n        const devices = await navigator.mediaDevices.enumerateDevices();\r\n        const camera = devices.find(\r\n          (device) =>\r\n            device.kind === \"videoinput\" && device.label.includes(\"C920\")\r\n        );\r\n        return camera || null;\r\n      } catch (error) {\r\n        console.error(\"Error enumerating devices:\", error);\r\n        return null;\r\n      }\r\n    };\r\n\r\n    // If the camera is found the current media device will stream the video input onto the website.\r\n    const startCamera = async (): Promise<void> => {\r\n      const camera = await findCamera();\r\n      if (camera) {\r\n        const constraints: MediaStreamConstraints = {\r\n          video: { deviceId: camera.deviceId },\r\n        };\r\n\r\n        navigator.mediaDevices\r\n          .getUserMedia(constraints)\r\n          .then((stream) => {\r\n            if (videoRef.current) {\r\n              videoRef.current.srcObject = stream;\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error accessing camera:\", error);\r\n          });\r\n      } else {\r\n        console.error(\"Camera not found.\");\r\n      }\r\n    };\r\n\r\n    startCamera();\r\n  }, []);\r\n\r\n  // Takes a picture of the input and stores the image in a background running useState.\r\n  const takePicture = () => {\r\n    if (videoRef.current && canvasRef.current) {\r\n      const video = videoRef.current;\r\n      const canvas = canvasRef.current;\r\n\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n\r\n      const context = canvas.getContext(\"2d\");\r\n      context?.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n      const dataUrl = canvas.toDataURL(\"image/png\");\r\n\r\n      if (capturedImageContext) {\r\n        capturedImageContext.setCapturedImage(dataUrl);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Returns the video input from the camera and a button that starts a countdown for the picture to be taken.\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} autoPlay muted />\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n      {isCounting ? (\r\n        <p>Countdown: {countdown}</p>\r\n      ) : (\r\n        <button onClick={startCountdown}>Start Countdown</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export for use in pages\r\nexport default CameraComponent;\r\n","C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\ImageScrollerComponent.tsx",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\modules\\BackgroundImageModule.ts",[],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\components\\MergeTestComponent.tsx",["105","106","107"],[],"C:\\Users\\trond\\Documents\\Unity\\Naples\\src\\pages\\TestPictureMerge.tsx",["108"],[],"import ChooseBackgroundComponent from \"../components/ChooseBackgroundComponent\";\r\nimport MergeTestComponent from \"../components/MergeTestComponent\";\r\n\r\nconst TestPictureMerge = () => {\r\n    return(        \r\n        <MergeTestComponent/>\r\n    )\r\n}\r\n\r\nexport default TestPictureMerge;",{"ruleId":"109","severity":1,"message":"110","line":3,"column":3,"nodeType":"111","messageId":"112","endLine":3,"endColumn":13},{"ruleId":"109","severity":1,"message":"113","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":27},{"ruleId":"109","severity":1,"message":"114","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":38},{"ruleId":"109","severity":1,"message":"115","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":22},{"ruleId":"109","severity":1,"message":"116","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":30},{"ruleId":"109","severity":1,"message":"117","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":33},{"ruleId":"109","severity":1,"message":"118","line":2,"column":43,"nodeType":"111","messageId":"112","endLine":2,"endColumn":49},{"ruleId":"109","severity":1,"message":"119","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":27},{"ruleId":"109","severity":1,"message":"120","line":17,"column":10,"nodeType":"111","messageId":"112","endLine":17,"endColumn":22},{"ruleId":"109","severity":1,"message":"121","line":17,"column":24,"nodeType":"111","messageId":"112","endLine":17,"endColumn":39},{"ruleId":"109","severity":1,"message":"114","line":2,"column":18,"nodeType":"111","messageId":"112","endLine":2,"endColumn":27},{"ruleId":"109","severity":1,"message":"122","line":2,"column":29,"nodeType":"111","messageId":"112","endLine":2,"endColumn":37},{"ruleId":"109","severity":1,"message":"123","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":32},{"ruleId":"124","severity":1,"message":"125","line":36,"column":6,"nodeType":"126","endLine":36,"endColumn":51,"suggestions":"127"},{"ruleId":"109","severity":1,"message":"118","line":2,"column":43,"nodeType":"111","messageId":"112","endLine":2,"endColumn":49},{"ruleId":"109","severity":1,"message":"119","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":27},{"ruleId":"109","severity":1,"message":"128","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":22},{"ruleId":"109","severity":1,"message":"117","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":33},"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'useEffect' is defined but never used.","'ResponseType' is defined but never used.","'CapturedImageContext' is defined but never used.","'ChooseBackgroundComponent' is defined but never used.","'useRef' is defined but never used.","'BackgroundImageItem' is defined but never used.","'overlayImage' is assigned a value but never used.","'setOverlayImage' is assigned a value but never used.","'useState' is defined but never used.","'BackgroundRemoverService' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'takePicture'. Either include them or remove the dependency array.","ArrayExpression",["129"],"'ICapturedImage' is defined but never used.",{"desc":"130","fix":"131"},"Update the dependencies array to be: [countdown, isCounting, capturedImageContext, takePicture, navigate]",{"range":"132","text":"133"},[1357,1402],"[countdown, isCounting, capturedImageContext, takePicture, navigate]"]